@page "/authentication/register"
@inject IAuthenticationService AuthenticationService
@inject AuthenticationStateProvider AuthProvider
@inject NavigationManager NavManager
@using TeachPlanner.BlazorClient.Authentication
@using TeachPlanner.BlazorClient.Services
@using TeachPlanner.BlazorClient.Validators
@using TeachPlanner.Shared.Contracts.Authentication
@implements IDisposable

<EditForm EditContext="editContext" OnValidSubmit="HandleSubmit">
    <div class="flex flex-col w-full max-w-md m-auto">
        <h2 class="text-xl text-center mb-4">Please enter your details to create an account</h2>
        <label htmlFor="firstName" class="text-lg pb-1">First Name</label>
        <InputText class="w-full text-lg border border-gray-300 hover:border-gray-500 hover:shadow-inner rounded-md p-1 mb-2 focus:border-gray-300" @bind-Value="Model.FirstName" id="firstName" name="firstName" required/>
        <label class="text-lg pb-1" htmlFor="lastName">Last Name</label>
        <InputText class="w-full text-lg border border-gray-300 hover:border-gray-500 hover:shadow-inner rounded-md p-1 mb-2 focus:border-gray-300" @bind-Value="Model.LastName" id="lastName" name="lastName" required/>
        <label class="text-lg pb-1" htmlFor="email">Email</label>
        <div class="text-ceramic font-semibold">
            <ValidationMessage For="() => Model.Email"/>
        </div>
        <InputText class="w-full text-lg border border-gray-300 hover:border-gray-500 hover:shadow-inner rounded-md p-1 mb-2 focus:border-gray-300" @bind-Value="Model.Email" id="email" name="email" required/>
        <label class="text-lg pb-1" htmlFor="password">Password</label>
        <InputText type="password" class="w-full text-lg border border-gray-300 hover:border-gray-500 hover:shadow-inner rounded-md p-1 mb-2 focus:border-gray-300" @bind-Value="Model.Password" id="password" name="password" required autocomplete="new-password"/>
        <label class="text-lg pb-1" htmlFor="confirmPassword">Confirm Password</label>
        <InputText type="password" class="w-full text-lg border border-gray-300 hover:border-gray-500 hover:shadow-inner rounded-md p-1 mb-2 focus:border-gray-300" @bind-Value="Model.ConfirmedPassword" id="confirmPassword" name="confirmPassword" required autocomplete="new-password"/>
        <div class="text-ceramic font-semibold">
            <ValidationMessage For="() => Model.Password"/>
        </div>
        <button Type="submit" class="bg-sage text-white hover:bg-sageHover px-4 py-1 rounded-md text-lg mr-auto mt-2 @(disabled ? "!bg-baseDisabled hover:!bg-baseDisabled" : "")">
            Register
        </button>

        @if (_errorMessage is not null)
        {
            <p class="my-2 text-ceramic text-lg">@_errorMessage</p>
        }
    </div>
</EditForm>


@code {
    private EditContext? editContext;
    private ValidationMessageStore? messageStore;
    private string? _errorMessage = null;
    private bool disabled = false;

    [CascadingParameter] public Task<AuthenticationState> AuthState { get; set; } = null!;

    [SupplyParameterFromForm] public RegisterModel? Model { get; set; }

    protected override void OnInitialized()
    {
        Model = new RegisterModel();
        editContext = new EditContext(Model);
        editContext.OnValidationRequested += HandleValidationRequested;
        messageStore = new ValidationMessageStore(editContext);
    }

    protected override async Task OnInitializedAsync()
    {
        var user = (await AuthState).User;
        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            NavManager.NavigateTo("/week-planner");
        }
    }

    private void HandleValidationRequested(object? sender, ValidationRequestedEventArgs args)
    {
        messageStore?.Clear();

        if (!AuthenticationValidators.IsValidPassword(Model!.Password))
        {
            messageStore?.Add(() => Model!.Password, "Password must be at least 10 characters long and contain uppercase, lowercase, numbers and non-alphanumeric characters");
        }

        if (Model!.Password != Model!.ConfirmedPassword)
        {
            messageStore?.Add(() => Model!.Password, "Passwords do not match");
        }

        if (!AuthenticationValidators.IsValidEmail(Model!.Email))
        {
            messageStore?.Add(() => Model!.Email, "Please enter a valid email");
        }
    }

    private async Task HandleSubmit()
    {
        disabled = true;
        _errorMessage = null;
        try
        {
            await AuthenticationService.Register(Model!);
            (AuthProvider as CustomAuthenticationStateProvider)!.NotifyAuthState();
            NavManager.NavigateTo("/account-setup");
        }
        catch (Exception e)
        {
            _errorMessage = e.Message;
            disabled = false;
        }
    }

    public void Dispose()
    {
        if (editContext is not null)
        {
            editContext.OnValidationRequested -= HandleValidationRequested;
        }
    }

}
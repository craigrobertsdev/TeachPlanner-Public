@using TeachPlanner.BlazorClient.State
@using TeachPlanner.Shared.Enums
@using TeachPlanner.Shared.Extensions
@attribute [Authorize]

@inject IJSRuntime JSRuntime
@inject IHttpClientFactory HttpFactory
@inject NavigationManager NavManager
@inject ApplicationState AppState

@*
    This page allows the user to create a weekly lesson plan pattern that will be used to provide default information for new day plans.

    When a user loads into their week planner for the first time, they will be presented with the pattern they created here.

    Each lesson can be changed as need be but the default information will be pulled from this template and sent to the LessonPlanner page.

    The user will be presented with an interactive grid that mimics the week planner.
    They can click on a lesson slot and select a lesson from a dropdown list. They can also add a new lesson to the list.
    They can choose the number of periods that each lesson will cover.
    The number of lessons will be obtained from the server as this is done at account setup.

    A future feature will be to allow the user to create multiple templates and select which one they want to use for the week.
*@

<h2 class="text-2xl pb-4">Add the structure of your school's day</h2>
<div class="max-w-screen-xl m-auto">
    <div class="flex gap-6 pb-2">
        <div class="w-1/2">
            <MudSelect T="string" ValueChanged="SelectSubject" Value="SelectedLesson?.SubjectName" Label="Subject" Placeholder=" " Disabled="@(SelectedLesson is null)" Variant="Variant.Filled" Margin="Margin.None">
                <MudSelectItem Value="NIT">NIT</MudSelectItem>
                @foreach (var subject in Parent.SelectedSubjects)
                {
                    <MudSelectItem Value="subject">@subject</MudSelectItem>
                }
            </MudSelect>
        </div>
        <div class="w-1/2">
            <MudSelect T="int?" ValueChanged="SelectNumberOfLessons" Value="SelectedLesson?.NumberOfPeriods" Label="Number of lessons" Disabled="@(SelectedLesson is null)" Variant="Variant.Filled" Margin="Margin.None">
                @foreach (var i in LessonSpans)
                {
                    <MudSelectItem T="int?" Value="i">@i</MudSelectItem>
                }
            </MudSelect>
        </div>
    </div>

    <!-- Week Planner container grid -->
    <div style="grid-auto-rows: @_gridRows" class="grid grid-cols-[minmax(7rem,_0.3fr),_repeat(5,_1fr)] max-w-screen-xl border-t-2 border-darkGreenBorder">
        <div class="row-start-1 col-start-1 flex items-center justify-center border-l-2 border-r-2 border-b-2 border-darkGreenBorder text-center text-lg font-bold"></div>
        @for (var i = 0; i < Parent.WeekStructure.Periods.Count; i++)
        {
            if (Parent.WeekStructure.Periods[i].PeriodType == PeriodType.Lesson)
            {
                <div class="col-start-1 items-center flex flex-col justify-center border-l-2 border-r-2 border-b-2 border-darkGreenBorder text-center text-lg font-semibold ">
                    <h5>Lesson @CalculatePeriodNumber(i + 1)</h5>
                    <p class="text-sm">@Parent.WeekStructure.Periods[i].StartTime</p>
                </div>
            }
            else
            {
                <div class="col-start-1 items-center flex flex-col justify-center border-l-2 border-r-2 border-b-2 border-darkGreenBorder text-center text-lg font-semibold ">
                    <p>@Parent.WeekStructure.Periods[i].Name</p>
                </div>
            }
        }
        <!-- Week day headers -->
        @for (var i = 0; i < 5; i++)
        {
            <div class="col-start-@(i + 2) row-start-1 border-r-2 border-b-2 border-darkGreenBorder">
                <p class="text-center text-lg">@_daysOfTheWeek[i]</p>
            </div>
        }

        <!-- DayPlan Columns -->
        @for (var i = 0; i < 5; i++)
        {
            var idx = i;

            @* For NWDs *@
            if (Parent.WeekStructure!.DayTemplates[idx].IsNonWorkingDay)
            {
                var numberOfPeriods = 0;
                var row = 2; // start at 2 to account for the header row
                var col = i + 2;

                for (var j = 0; j <= Parent.WeekStructure!.Periods.Count; j++)
                {
                    if (j < Parent.WeekStructure.Periods.Count && Parent.WeekStructure.Periods[j].PeriodType == PeriodType.Lesson)
                    {
                        numberOfPeriods++;
                    }
                    else
                    {
                        // Draw the lesson block
                        <div class="row-start-@row row-span-@(numberOfPeriods) col-start-@col h-full w-full border-r-2 border-b-2 border-darkGreenBorder">
                            <p class="h-full w-full bg-baseDisabled"></p>
                        </div>

                        // Draw the break
                        <div class="row-start-@(row + numberOfPeriods) col-start-@col h-full w-full border-r-2 border-b-2 border-darkGreenBorder">
                            <p class="h-full w-full bg-slate-300"></p>
                        </div>

                        row += numberOfPeriods + 1;
                        numberOfPeriods = 0;
                    }
                }
            }
            else
            {
                for (var j = 0; j < Parent.WeekStructure?.Periods.Count; j++)
                {
                    var row = j + 2;
                    var col = i + 2;
                    var day = i;
                    var period = j;

                    @* Lesson Plan Cards *@
                    if (Parent.WeekStructure.Periods[j].PeriodType == PeriodType.Lesson)
                    {
                        var periodNumber = j + 1;
                        var lessonPlan = GetLessonPlan(i, periodNumber);
                        var overlapsBreak = lessonPlan.NumberOfPeriods > 1 && Parent.WeekStructure?.Periods[j + 1].PeriodType == PeriodType.Break;
                        <div class="row-start-@row row-span-@(overlapsBreak ? lessonPlan?.NumberOfPeriods + 1 : lessonPlan?.NumberOfPeriods)
                                col-start-@col h-full w-full border-r-2 border-b-2 border-darkGreenBorder
                                @(IsSelected(lessonPlan!) ? "bg-sage outline outline-2 outline-offset-[-1px] shadow-inner" : "")
                                hover:outline hover:outline-2 hover:outline-offset-[-1px] hover:shadow-inner"
                             @onclick="() => SelectLesson(lessonPlan!, day, period)">

                            <div class="flex flex-col items-center h-full w-full bg-@(lessonPlan.SubjectName?.GetCssClassString()) hover:outline hover:outline-2 hover:outline-offset-[-1px] hover:shadow-inner cursor-default">
                                <p class="font-bold p-2 m-auto">@lessonPlan.SubjectName</p>
                            </div>

                            @* Conditionals to handle merging cells for multi-period lessons *@
                            @if (lessonPlan.NumberOfPeriods > 1)
                            {
                                j += lessonPlan.NumberOfPeriods - 1;
                            }

                        </div>
                        @if (overlapsBreak)
                        {
                            j += 1;
                        }
                    }
                    else
                    {
                        @* Break Plan Cards *@
                        <div class="row-start-@row col-start-@col h-full w-full border-r-2 border-b-2 border-darkGreenBorder bg-slate-300">
                        </div>
                    }
                }
            }
        }
    </div>
    @if (_errorMessage is not null)
    {
        <p class="text-red-500">@_errorMessage</p>
    }
</div>
// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TeachPlanner.Shared.Database;

#nullable disable

namespace TeachPlanner.Shared.Database.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240711043254_RemoveAUCurriculum")]
    partial class RemoveAUCurriculum
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("CalendarSchoolEvent", b =>
                {
                    b.Property<Guid>("CalendarId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SchoolEventsId")
                        .HasColumnType("char(36)");

                    b.HasKey("CalendarId", "SchoolEventsId");

                    b.HasIndex("SchoolEventsId");

                    b.ToTable("CalendarSchoolEvent");
                });

            modelBuilder.Entity("CurriculumSubjectTeacher", b =>
                {
                    b.Property<Guid>("SubjectsTaughtId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("char(36)");

                    b.HasKey("SubjectsTaughtId", "TeacherId");

                    b.HasIndex("TeacherId");

                    b.ToTable("CurriculumSubjectTeacher");
                });

            modelBuilder.Entity("CurriculumSubjectTermPlan", b =>
                {
                    b.Property<Guid>("SubjectsId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TermPlanId")
                        .HasColumnType("char(36)");

                    b.HasKey("SubjectsId", "TermPlanId");

                    b.HasIndex("TermPlanId");

                    b.ToTable("CurriculumSubjectTermPlan");
                });

            modelBuilder.Entity("DayPlanSchoolEvent", b =>
                {
                    b.Property<Guid>("DayPlanId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SchoolEventsId")
                        .HasColumnType("char(36)");

                    b.HasKey("DayPlanId", "SchoolEventsId");

                    b.HasIndex("SchoolEventsId");

                    b.ToTable("DayPlanSchoolEvent");
                });

            modelBuilder.Entity("LessonPlanResource", b =>
                {
                    b.Property<Guid>("LessonPlansId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ResourcesId")
                        .HasColumnType("char(36)");

                    b.HasKey("LessonPlansId", "ResourcesId");

                    b.HasIndex("ResourcesId");

                    b.ToTable("LessonPlanResource");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TeachPlanner.Shared.Domain.Assessments.Assessment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)")
                        .HasColumnName("Id");

                    b.Property<string>("AssessmentType")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<DateTime>("DateConducted")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PlanningNotes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("YearLevel")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.ToTable("assessments", (string)null);
                });

            modelBuilder.Entity("TeachPlanner.Shared.Domain.Calendar.Calendar", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("TermEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("TermNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("TermStart")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("calendar", (string)null);
                });

            modelBuilder.Entity("TeachPlanner.Shared.Domain.Common.Planner.SchoolEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("EventEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("EventStart")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("FullDay")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("school_events", (string)null);
                });

            modelBuilder.Entity("TeachPlanner.Shared.Domain.Curriculum.CurriculumSubject", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)")
                        .HasColumnName("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("curriculum_subjects", (string)null);
                });

            modelBuilder.Entity("TeachPlanner.Shared.Domain.Curriculum.YearLevel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CurriculumSubjectId")
                        .HasColumnType("char(36)");

                    b.Property<int>("YearLevelValue")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CurriculumSubjectId");

                    b.ToTable("year_levels", (string)null);
                });

            modelBuilder.Entity("TeachPlanner.Shared.Domain.LessonPlans.LessonPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)")
                        .HasColumnName("Id");

                    b.Property<string>("ContentDescriptionIds")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("DayPlanId")
                        .HasColumnType("char(36)");

                    b.Property<DateOnly>("LessonDate")
                        .HasColumnType("date");

                    b.Property<int>("NumberOfPeriods")
                        .HasColumnType("int");

                    b.Property<string>("PlanningNotes")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("StartPeriod")
                        .HasColumnType("int");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("YearDataId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("DayPlanId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("YearDataId");

                    b.ToTable("lesson_plans", (string)null);
                });

            modelBuilder.Entity("TeachPlanner.Shared.Domain.PlannerTemplates.TermDate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.Property<int>("TermNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("term_dates", (string)null);
                });

            modelBuilder.Entity("TeachPlanner.Shared.Domain.PlannerTemplates.WeekStructure", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("YearDataId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.HasIndex("YearDataId")
                        .IsUnique();

                    b.ToTable("week_structures", (string)null);
                });

            modelBuilder.Entity("TeachPlanner.Shared.Domain.Reports.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("YearLevel")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.ToTable("reports", (string)null);
                });

            modelBuilder.Entity("TeachPlanner.Shared.Domain.Students.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)")
                        .HasColumnName("Id");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("YearDataId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.HasIndex("YearDataId");

                    b.ToTable("students", (string)null);
                });

            modelBuilder.Entity("TeachPlanner.Shared.Domain.Teachers.Resource", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)")
                        .HasColumnName("Id");

                    b.Property<string>("AssociatedStrands")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsAssessment")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("_yearLevels")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("YearLevels");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.ToTable("resources", (string)null);
                });

            modelBuilder.Entity("TeachPlanner.Shared.Domain.Teachers.Teacher", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)")
                        .HasColumnName("Id");

                    b.Property<bool>("AccountSetupComplete")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("teachers", (string)null);
                });

            modelBuilder.Entity("TeachPlanner.Shared.Domain.TermPlanners.TermPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("TermNumber")
                        .HasColumnType("int");

                    b.Property<Guid>("TermPlannerId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("TermPlannerId");

                    b.ToTable("term_plans", (string)null);
                });

            modelBuilder.Entity("TeachPlanner.Shared.Domain.TermPlanners.TermPlanner", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)")
                        .HasColumnName("Id");

                    b.Property<int>("CalendarYear")
                        .HasColumnType("int");

                    b.Property<Guid>("YearDataId")
                        .HasColumnType("char(36)");

                    b.Property<string>("_yearLevels")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("YearLevels");

                    b.HasKey("Id");

                    b.HasIndex("YearDataId")
                        .IsUnique();

                    b.ToTable("term_planner", (string)null);
                });

            modelBuilder.Entity("TeachPlanner.Shared.Domain.Users.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("RefreshTokenExpiry")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("TeachPlanner.Shared.Domain.WeekPlanners.DayPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)")
                        .HasColumnName("Id");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<Guid>("WeekPlannerId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("WeekPlannerId");

                    b.ToTable("day_plans", (string)null);
                });

            modelBuilder.Entity("TeachPlanner.Shared.Domain.WeekPlanners.WeekPlanner", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("TermNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("WeekNumber")
                        .HasColumnType("int");

                    b.Property<DateOnly>("WeekStart")
                        .HasColumnType("date");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.Property<Guid>("YearDataId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("YearDataId");

                    b.ToTable("week_planner", (string)null);
                });

            modelBuilder.Entity("TeachPlanner.Shared.Domain.YearDataRecords.YearData", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)")
                        .HasColumnName("Id");

                    b.Property<int>("CalendarYear")
                        .HasColumnType("int");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("TermPlannerId")
                        .HasColumnType("char(36)");

                    b.Property<string>("_yearLevelsTaught")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("YearLevels");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.HasIndex("TermPlannerId")
                        .IsUnique();

                    b.ToTable("yeardata", (string)null);
                });

            modelBuilder.Entity("CalendarSchoolEvent", b =>
                {
                    b.HasOne("TeachPlanner.Shared.Domain.Calendar.Calendar", null)
                        .WithMany()
                        .HasForeignKey("CalendarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeachPlanner.Shared.Domain.Common.Planner.SchoolEvent", null)
                        .WithMany()
                        .HasForeignKey("SchoolEventsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CurriculumSubjectTeacher", b =>
                {
                    b.HasOne("TeachPlanner.Shared.Domain.Curriculum.CurriculumSubject", null)
                        .WithMany()
                        .HasForeignKey("SubjectsTaughtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeachPlanner.Shared.Domain.Teachers.Teacher", null)
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CurriculumSubjectTermPlan", b =>
                {
                    b.HasOne("TeachPlanner.Shared.Domain.Curriculum.CurriculumSubject", null)
                        .WithMany()
                        .HasForeignKey("SubjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeachPlanner.Shared.Domain.TermPlanners.TermPlan", null)
                        .WithMany()
                        .HasForeignKey("TermPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DayPlanSchoolEvent", b =>
                {
                    b.HasOne("TeachPlanner.Shared.Domain.WeekPlanners.DayPlan", null)
                        .WithMany()
                        .HasForeignKey("DayPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeachPlanner.Shared.Domain.Common.Planner.SchoolEvent", null)
                        .WithMany()
                        .HasForeignKey("SchoolEventsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LessonPlanResource", b =>
                {
                    b.HasOne("TeachPlanner.Shared.Domain.LessonPlans.LessonPlan", null)
                        .WithMany()
                        .HasForeignKey("LessonPlansId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TeachPlanner.Shared.Domain.Teachers.Resource", null)
                        .WithMany()
                        .HasForeignKey("ResourcesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TeachPlanner.Shared.Domain.Users.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TeachPlanner.Shared.Domain.Users.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeachPlanner.Shared.Domain.Users.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TeachPlanner.Shared.Domain.Users.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TeachPlanner.Shared.Domain.Assessments.Assessment", b =>
                {
                    b.HasOne("TeachPlanner.Shared.Domain.Students.Student", null)
                        .WithMany("Assessments")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TeachPlanner.Shared.Domain.Curriculum.CurriculumSubject", null)
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeachPlanner.Shared.Domain.Teachers.Teacher", null)
                        .WithMany("Assessments")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("TeachPlanner.Shared.Domain.Assessments.AssessmentResult", "AssessmentResult", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("char(36)");

                            b1.Property<Guid>("AssessmentId")
                                .HasColumnType("char(36)");

                            b1.Property<string>("Comments")
                                .IsRequired()
                                .HasMaxLength(1000)
                                .HasColumnType("varchar(1000)");

                            b1.Property<DateTime>("CreatedDateTime")
                                .HasColumnType("datetime(6)");

                            b1.Property<DateTime>("DateMarked")
                                .HasColumnType("datetime(6)");

                            b1.Property<DateTime>("UpdatedDateTime")
                                .HasColumnType("datetime(6)");

                            b1.HasKey("Id", "AssessmentId");

                            b1.HasIndex("AssessmentId")
                                .IsUnique();

                            b1.ToTable("assessment_results", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("AssessmentId");

                            b1.OwnsOne("TeachPlanner.Shared.Domain.Assessments.AssessmentGrade", "Grade", b2 =>
                                {
                                    b2.Property<Guid>("AssessmentResultId")
                                        .HasColumnType("char(36)");

                                    b2.Property<Guid>("AssessmentResultAssessmentId")
                                        .HasColumnType("char(36)");

                                    b2.Property<string>("Grade")
                                        .IsRequired()
                                        .HasMaxLength(10)
                                        .HasColumnType("varchar(10)");

                                    b2.Property<double?>("Percentage")
                                        .IsRequired()
                                        .HasColumnType("double")
                                        .HasColumnName("Percentage");

                                    b2.HasKey("AssessmentResultId", "AssessmentResultAssessmentId");

                                    b2.ToTable("assessment_results");

                                    b2.WithOwner()
                                        .HasForeignKey("AssessmentResultId", "AssessmentResultAssessmentId");
                                });

                            b1.Navigation("Grade")
                                .IsRequired();
                        });

                    b.Navigation("AssessmentResult");
                });

            modelBuilder.Entity("TeachPlanner.Shared.Domain.Common.Planner.SchoolEvent", b =>
                {
                    b.OwnsOne("TeachPlanner.Shared.Domain.Common.Location", "Location", b1 =>
                        {
                            b1.Property<Guid>("SchoolEventId")
                                .HasColumnType("char(36)");

                            b1.Property<string>("StreetName")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("varchar(50)");

                            b1.Property<string>("StreetNumber")
                                .IsRequired()
                                .HasMaxLength(30)
                                .HasColumnType("varchar(30)");

                            b1.Property<string>("Suburb")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("varchar(50)");

                            b1.HasKey("SchoolEventId");

                            b1.ToTable("school_events");

                            b1.WithOwner()
                                .HasForeignKey("SchoolEventId");
                        });

                    b.Navigation("Location")
                        .IsRequired();
                });

            modelBuilder.Entity("TeachPlanner.Shared.Domain.Curriculum.YearLevel", b =>
                {
                    b.HasOne("TeachPlanner.Shared.Domain.Curriculum.CurriculumSubject", null)
                        .WithMany("YearLevels")
                        .HasForeignKey("CurriculumSubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("TeachPlanner.Shared.Domain.Curriculum.Capability", "Capabilities", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("char(36)");

                            b1.Property<string>("Descriptors")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<Guid>("YearLevelId")
                                .HasColumnType("char(36)");

                            b1.HasKey("Id");

                            b1.HasIndex("YearLevelId");

                            b1.ToTable("capabilities", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("YearLevelId");
                        });

                    b.OwnsMany("TeachPlanner.Shared.Domain.Curriculum.ConceptualOrganiser", "ConceptualOrganisers", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("char(36)");

                            b1.Property<string>("ConceptualUnderstandings")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("WhatItIs")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("WhyItMatters")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<Guid>("YearLevelId")
                                .HasColumnType("char(36)");

                            b1.HasKey("Id");

                            b1.HasIndex("YearLevelId");

                            b1.ToTable("conceptual_organisers", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("YearLevelId");

                            b1.OwnsMany("TeachPlanner.Shared.Domain.Curriculum.ContentDescription", "ContentDescriptions", b2 =>
                                {
                                    b2.Property<Guid>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("char(36)");

                                    b2.Property<string>("CurriculumCodes")
                                        .IsRequired()
                                        .HasColumnType("longtext");

                                    b2.Property<string>("Text")
                                        .IsRequired()
                                        .HasColumnType("longtext");

                                    b2.Property<Guid>("YearLevelId")
                                        .HasColumnType("char(36)");

                                    b2.HasKey("Id");

                                    b2.HasIndex("YearLevelId");

                                    b2.ToTable("content_descriptions", (string)null);

                                    b2.WithOwner()
                                        .HasForeignKey("YearLevelId");
                                });

                            b1.Navigation("ContentDescriptions");
                        });

                    b.OwnsMany("TeachPlanner.Shared.Domain.Curriculum.Disposition", "Dispositions", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("char(36)");

                            b1.Property<string>("DevelopedWhen")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("Title")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<Guid>("YearLevelId")
                                .HasColumnType("char(36)");

                            b1.HasKey("Id");

                            b1.HasIndex("YearLevelId");

                            b1.ToTable("dispositions", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("YearLevelId");
                        });

                    b.Navigation("Capabilities");

                    b.Navigation("ConceptualOrganisers");

                    b.Navigation("Dispositions");
                });

            modelBuilder.Entity("TeachPlanner.Shared.Domain.LessonPlans.LessonPlan", b =>
                {
                    b.HasOne("TeachPlanner.Shared.Domain.WeekPlanners.DayPlan", null)
                        .WithMany("LessonPlans")
                        .HasForeignKey("DayPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeachPlanner.Shared.Domain.Curriculum.CurriculumSubject", null)
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TeachPlanner.Shared.Domain.YearDataRecords.YearData", null)
                        .WithMany("LessonPlans")
                        .HasForeignKey("YearDataId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.OwnsMany("TeachPlanner.Shared.Domain.LessonPlans.LessonComment", "Comments", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("char(36)");

                            b1.Property<Guid>("LessonPlanId")
                                .HasColumnType("char(36)");

                            b1.Property<bool>("Completed")
                                .HasColumnType("tinyint(1)");

                            b1.Property<DateTime?>("CompletedDateTime")
                                .HasColumnType("datetime(6)");

                            b1.Property<string>("Content")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<DateTime>("CreatedDateTime")
                                .HasColumnType("datetime(6)");

                            b1.Property<bool>("StruckOut")
                                .HasColumnType("tinyint(1)");

                            b1.Property<DateTime>("UpdatedDateTime")
                                .HasColumnType("datetime(6)");

                            b1.HasKey("Id", "LessonPlanId");

                            b1.HasIndex("LessonPlanId");

                            b1.ToTable("lesson_comment", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("LessonPlanId");
                        });

                    b.Navigation("Comments");
                });

            modelBuilder.Entity("TeachPlanner.Shared.Domain.PlannerTemplates.WeekStructure", b =>
                {
                    b.HasOne("TeachPlanner.Shared.Domain.Teachers.Teacher", null)
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeachPlanner.Shared.Domain.YearDataRecords.YearData", null)
                        .WithOne("WeekStructure")
                        .HasForeignKey("TeachPlanner.Shared.Domain.PlannerTemplates.WeekStructure", "YearDataId");

                    b.OwnsMany("TeachPlanner.Shared.Domain.PlannerTemplates.DayTemplate", "DayTemplates", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("char(36)");

                            b1.Property<Guid>("WeekStructureId")
                                .HasColumnType("char(36)");

                            b1.HasKey("Id");

                            b1.HasIndex("WeekStructureId");

                            b1.ToTable("day_templates", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("WeekStructureId");

                            b1.OwnsMany("TeachPlanner.Shared.Domain.PlannerTemplates.LessonTemplate", "Lessons", b2 =>
                                {
                                    b2.Property<Guid>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("char(36)");

                                    b2.Property<Guid>("DayTemplateId")
                                        .HasColumnType("char(36)");

                                    b2.Property<int>("NumberOfPeriods")
                                        .HasColumnType("int");

                                    b2.Property<int>("StartPeriod")
                                        .HasColumnType("int");

                                    b2.Property<string>("SubjectName")
                                        .IsRequired()
                                        .HasMaxLength(50)
                                        .HasColumnType("varchar(50)");

                                    b2.HasKey("Id");

                                    b2.HasIndex("DayTemplateId");

                                    b2.ToTable("day_template_lessons", (string)null);

                                    b2.WithOwner()
                                        .HasForeignKey("DayTemplateId");
                                });

                            b1.Navigation("Lessons");
                        });

                    b.OwnsMany("TeachPlanner.Shared.Domain.PlannerTemplates.TemplatePeriod", "Periods", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("char(36)");

                            b1.Property<TimeOnly>("EndTime")
                                .HasColumnType("time(6)");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("PeriodType")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("varchar(20)");

                            b1.Property<TimeOnly>("StartTime")
                                .HasColumnType("time(6)");

                            b1.Property<Guid>("WeekStructureId")
                                .HasColumnType("char(36)");

                            b1.HasKey("Id");

                            b1.HasIndex("WeekStructureId");

                            b1.ToTable("template_periods", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("WeekStructureId");
                        });

                    b.Navigation("DayTemplates");

                    b.Navigation("Periods");
                });

            modelBuilder.Entity("TeachPlanner.Shared.Domain.Reports.Report", b =>
                {
                    b.HasOne("TeachPlanner.Shared.Domain.Students.Student", null)
                        .WithMany("Reports")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TeachPlanner.Shared.Domain.Curriculum.CurriculumSubject", null)
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TeachPlanner.Shared.Domain.Teachers.Teacher", null)
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.OwnsMany("TeachPlanner.Shared.Domain.Reports.ReportComment", "ReportComments", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("char(36)");

                            b1.Property<int>("CharacterLimit")
                                .HasColumnType("int");

                            b1.Property<string>("Comments")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("varchar(500)");

                            b1.Property<string>("Grade")
                                .IsRequired()
                                .HasMaxLength(10)
                                .HasColumnType("varchar(10)");

                            b1.Property<Guid>("ReportId")
                                .HasColumnType("char(36)");

                            b1.HasKey("Id");

                            b1.HasIndex("ReportId");

                            b1.ToTable("report_comments", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ReportId");
                        });

                    b.Navigation("ReportComments");
                });

            modelBuilder.Entity("TeachPlanner.Shared.Domain.Students.Student", b =>
                {
                    b.HasOne("TeachPlanner.Shared.Domain.Teachers.Teacher", null)
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeachPlanner.Shared.Domain.YearDataRecords.YearData", null)
                        .WithMany("Students")
                        .HasForeignKey("YearDataId");
                });

            modelBuilder.Entity("TeachPlanner.Shared.Domain.Teachers.Resource", b =>
                {
                    b.HasOne("TeachPlanner.Shared.Domain.Curriculum.CurriculumSubject", null)
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeachPlanner.Shared.Domain.Teachers.Teacher", null)
                        .WithMany("Resources")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TeachPlanner.Shared.Domain.Teachers.Teacher", b =>
                {
                    b.HasOne("TeachPlanner.Shared.Domain.Users.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("TeachPlanner.Shared.Domain.Teachers.Teacher", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("TeachPlanner.Shared.Domain.Teachers.YearDataEntry", "YearDataHistory", b1 =>
                        {
                            b1.Property<Guid>("TeacherId")
                                .HasColumnType("char(36)");

                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("char(36)");

                            b1.Property<int>("CalendarYear")
                                .HasColumnType("int")
                                .HasColumnName("CalendarYear");

                            b1.Property<Guid>("YearDataId")
                                .HasColumnType("char(36)")
                                .HasColumnName("YearDataId");

                            b1.HasKey("TeacherId", "Id");

                            b1.ToTable("year_data_entries", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("TeacherId");
                        });

                    b.Navigation("YearDataHistory");
                });

            modelBuilder.Entity("TeachPlanner.Shared.Domain.TermPlanners.TermPlan", b =>
                {
                    b.HasOne("TeachPlanner.Shared.Domain.TermPlanners.TermPlanner", "TermPlanner")
                        .WithMany("TermPlans")
                        .HasForeignKey("TermPlannerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TermPlanner");
                });

            modelBuilder.Entity("TeachPlanner.Shared.Domain.TermPlanners.TermPlanner", b =>
                {
                    b.HasOne("TeachPlanner.Shared.Domain.YearDataRecords.YearData", null)
                        .WithOne()
                        .HasForeignKey("TeachPlanner.Shared.Domain.TermPlanners.TermPlanner", "YearDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TeachPlanner.Shared.Domain.WeekPlanners.DayPlan", b =>
                {
                    b.HasOne("TeachPlanner.Shared.Domain.WeekPlanners.WeekPlanner", null)
                        .WithMany("DayPlans")
                        .HasForeignKey("WeekPlannerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TeachPlanner.Shared.Domain.WeekPlanners.WeekPlanner", b =>
                {
                    b.HasOne("TeachPlanner.Shared.Domain.YearDataRecords.YearData", null)
                        .WithMany("WeekPlanners")
                        .HasForeignKey("YearDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TeachPlanner.Shared.Domain.YearDataRecords.YearData", b =>
                {
                    b.HasOne("TeachPlanner.Shared.Domain.Teachers.Teacher", null)
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeachPlanner.Shared.Domain.TermPlanners.TermPlanner", null)
                        .WithOne()
                        .HasForeignKey("TeachPlanner.Shared.Domain.YearDataRecords.YearData", "TermPlannerId");

                    b.OwnsMany("TeachPlanner.Shared.Domain.YearDataRecords.Subject", "Subjects", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("char(36)");

                            b1.Property<Guid>("CurriculumSubjectId")
                                .HasColumnType("char(36)");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("varchar(50)")
                                .HasColumnName("Name");

                            b1.Property<Guid>("YearDataId")
                                .HasColumnType("char(36)");

                            b1.HasKey("Id");

                            b1.HasIndex("CurriculumSubjectId");

                            b1.HasIndex("YearDataId");

                            b1.ToTable("subjects", (string)null);

                            b1.HasOne("TeachPlanner.Shared.Domain.Curriculum.CurriculumSubject", null)
                                .WithMany()
                                .HasForeignKey("CurriculumSubjectId")
                                .OnDelete(DeleteBehavior.NoAction)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("YearDataId");

                            b1.OwnsMany("TeachPlanner.Shared.Domain.YearDataRecords.YearDataContentDescription", "ContentDescriptions", b2 =>
                                {
                                    b2.Property<Guid>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("char(36)");

                                    b2.Property<string>("CurriculumCode")
                                        .IsRequired()
                                        .HasMaxLength(15)
                                        .HasColumnType("varchar(15)");

                                    b2.Property<Guid>("SubjectId")
                                        .HasColumnType("char(36)");

                                    b2.HasKey("Id");

                                    b2.HasIndex("SubjectId");

                                    b2.ToTable("year_data_content_descriptions", (string)null);

                                    b2.WithOwner()
                                        .HasForeignKey("SubjectId");
                                });

                            b1.Navigation("ContentDescriptions");
                        });

                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("TeachPlanner.Shared.Domain.Curriculum.CurriculumSubject", b =>
                {
                    b.Navigation("YearLevels");
                });

            modelBuilder.Entity("TeachPlanner.Shared.Domain.Students.Student", b =>
                {
                    b.Navigation("Assessments");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("TeachPlanner.Shared.Domain.Teachers.Teacher", b =>
                {
                    b.Navigation("Assessments");

                    b.Navigation("Resources");
                });

            modelBuilder.Entity("TeachPlanner.Shared.Domain.TermPlanners.TermPlanner", b =>
                {
                    b.Navigation("TermPlans");
                });

            modelBuilder.Entity("TeachPlanner.Shared.Domain.WeekPlanners.DayPlan", b =>
                {
                    b.Navigation("LessonPlans");
                });

            modelBuilder.Entity("TeachPlanner.Shared.Domain.WeekPlanners.WeekPlanner", b =>
                {
                    b.Navigation("DayPlans");
                });

            modelBuilder.Entity("TeachPlanner.Shared.Domain.YearDataRecords.YearData", b =>
                {
                    b.Navigation("LessonPlans");

                    b.Navigation("Students");

                    b.Navigation("WeekPlanners");

                    b.Navigation("WeekStructure")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
